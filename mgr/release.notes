Changes in the version of toads that introduces the systematic use of weights.



global remarks
----------------

New versions of sextractor and cfitsio are mandatory.
shared libraries are use by default. We began to modify the requirements files
of used packages in order to write the path to shared libraries in executables.

It is not clear that shared libraries work on anything else than Linux...
at least this was not tested.


The Weight image
----------------

  We associate a weight image that contains the weight (i.e. the inverse of
the variance) of each image pixel. Using weights enables to trivially
enable pixels with infinite variance : they have a NULL weight.

  The weight map is built from the flat, dead, and cosmic images.
(ReducedImage::MakeWeight()). The satur "flagimage" of saturated
pixels is kept separate, unless saturated objects disappear at
stacking. The actual compnents used for assembling a weight map
are written in its fits header.

  Weights obtained form other softwares are in principle not overwritten but
only updated for binary masks.

  An important point associated with weight maps is that since we have
a local variance estimate, knowing the gain of the image (in order to
apply Poisson statistics) becomes useless. Furthermore, since weights
enable to interpret correctly stacks with a spatially varying number of 
images, which do not have a well defined gain, we did not try to compute
an "average" gain. The code parts resorting to such tricks (e,g, PSF fitting)
will have to be updated to use the weights, or compute a local gain 
from weights.


Ths cosmic image
----------------
 A binary image of cosmics is built from a laplacian filter applied 
to the data. The cuts then depend mainly on the seeing and sky fluctuations.
This cosmic map is used to zero the weights of corresponding pixels, which
then disappear at stacking. Developper Delphine Guide (guide@lpnhep.in2p3.fr).

Image Resampling
-----------------

  The weights are propagated using the squares of the image resampling
coefficients (see QuadraticInterpolate in image.cc), applied to the variance
(inverse of weights, taken in GtransfoImage::TransfomVariance). 
The interpolation
"formula" was studied once again, when discovering that weight maps
exhibit variations which depend on the local misalignment of the 
grids. There is no way to correct for that (the effect is true in the sense
that the computed variance is correct)


Stacking
-----------

The stacking was entirely reshufled. It resorts to optimum flux estimation
and provides several stacking and weighting schemes. Not all combinations
(already 12 to date) were tested. The most useful one was tested in detail:
the global weights are computed from photometric ratios of images,and local
pixel weights come from weight maps of stack components. The stack is then
just (by default) a weighted average of inputs. We also provide a 
clipped average and weighted median stackings. They are all faster than 
in the past.
  Stacking options can be given via routine calls or in the datacards.


Subtraction
-----------

The weights are not used (yet) for the kernel fit, but they are propagated
(in ImageSubtraction::MakeWeight()).


Detection
----------
 The detection was rewritten : dodetection.cc is replaced detection.cc.
2 new "stars" Detection and MatchedDetection replace the old Candidate,
CandidateStar and YquemStar. The old code however is still there.
The guidelines remain the same, but the code is far more compact.

 To summarize : we detect using a Gaussian matched filter, refine positions
remove neighbours, and compute scores using a gaussian PSF centered on the
refined position. 

This process is handled by DetectionProcess. Detection contains scores 
which are related to the ref (such as the world famous percentage increase).
There is a routine in DetectionRpocess to fill them, but one has to create
a new DetectionProcess instance related to ref images. This is handled
by ImageSubtraction::RunDetection (which also provides service decribed in next
paragraph).


Multiple Detection
------------------
  We have made provision for detection on several subtractions, without
any provision for matching algorithms. Namely, DetectionProcess::ScoresFromPos
computed detction scores from input positions. This is provided in order to
be able to compute scores (on a "partial" subtraction) of objects detected 
on a "total" subtraction.
  A MatchedDetection contains the main detection, and as many partial
detections (which are constructed from main detection positions) as one
wishes to push in there. The default behaviour of the new subtraction driver
(sub.cc) is to make a global subtraction from all "new" images, and get 
"addressed" detection scores on all partial subtractions. The result
of this process is written to matcheddet.list (TM).

Subtraction driver, subfile
---------------------------
The logic of the subtraction driver (sub.cc, which replace newsub.cc)
has been changed, but the syntax of "subfiles" remains compatible.
Syntax improvements include:
 - a line with the name of an image may be followed by SubImage.
  this means that a subimage of this image should be extracted
  before doing anything else. This is done by the SubImage class
(which derives from ReducedImage).
- the tags NEW1, NEW2 ,NEW... may be followed by the image name one 
wishes to give to them. Not sure it is useful.

The executable to launch the subtraction is now makesub

Summary
-------

A lot of checks remain to be done, but they are under way.


Goodies
-------

in toads 
dbimstat <DbImage> computes the sigma(im*sqrt(w)). useful
to trace that the weights have the right scale.















