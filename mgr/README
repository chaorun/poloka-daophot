for newcommers, junp to "HOW TO"


Recent upgrade (12/02) of Toads (regarding mainly the bindings with "root")
---------------------------------------------------------------------------

By default, toads is now bound to root. This toolbox provides usefull stuff for IOs
and enables to bind compiled code to a C++ interpretor. However, we do our best to 
ensure that the code remains usable without root. There is a USE_ROOT compilation 
flag turned on in requirements by default that you can try to turn off if you wish.

Since root is only delivered with shared libraries, we decided to go for shared libraries
with toads, sextractor, and cfitsio. This has a moderate performance hit when starting an 
application, but if you start many, this hit disappears. Shared libraries save disk space, 
but require that you can resolve libraries at runtime, on Linux and other unixes via the
LD_LIBRARY_PATH env variable. This variable is correctly set as soon as you source 
 mgr/setup.{csh,sh} in the toads directory (which runs the same script of the "used" packages)
We added a cmt/requirements dir/file in root itself, in order to do that. This requirements file
for root is to be found in toads/mgr/root_requirements. The root library can be obtained from
http://root.cern.ch/ or ncftp ftp://root.cern.ch/root.
At mid december 02, we tested with v3.03/09. There are a few issues about using the interpretor,
but the "batch" part, i.e. the IO's work.
  One more word about shared libraries: you have to update your requirements files 
in sextractor and cfitsio, to get the coorect assignments of libraries and LD_LIBRARY_PATH.

About how one generates IO routines for a class using root in the toads framework (i.e.
the Makefile), the documentation is underway!


One important point: since I added a new directory (root specific) to the source tree, 
with a few files in, you have to run "cvs update -d" to get it created.


So, to summarize:
1) you have to get root, turn the file tree to a toads-like one (root/<version>), 
  and plug the requirements file (mgr/root_requirements in toads) in the root tree
  (root/<version>/cmt/requirements)
2) you have to update your sex/.../requirements and cfitsio/.../requirements
3) you have to run cmt config everywhere ("cmt broadcast cmt config" from toads/../mgr)
4) I guess it is the whole story...

alternative: 
you do not use Toads/Root bindings (which is still possible).
You then just comment "use root" and "macro USE_ROOT" in the 
requirements file.

The current Makefile was tested using cmt v1r10. If you have to update,
go to http://www.cmtsite.org/



=====================================================================================

HOW TO:

0) construct anything:
  you need to have cmt (to compile and link)
  if you do not have it, 

  ( or get it on http://www.lal.in2p3.fr/technique/si/SI/CMT/CMT.html)
    it is a good idea to execute the setup script of cmt when logging in

  We use the cernlib for a certain number of utilities. For mandatory ones,
  the source is included in the distribution (cern_stuff directory).
  For some non critical applications, you have to link with the cern library.
  If you miss it just comment the corresponding entries in the requirements file

  We use cfitsio for the IO's of FITS images and Sextractor as an
  object  detector. Both were slightly modified and should be 
  taken in the cvs repository.

  They have each to be installed in
  ..../sex/v2r20/ 
   .../cfitsio/v2r032/
  (for the versions required presently by toads, which are specified in the 
   'requirements' file, in 'use' statements)

  the point where you install sextractor and cfitsio has either
  to be the same as where you put toads, or to be defined in a
  CMTPATH env var, which works as a usual path.
  my CMTPATH reads :
  /users/snovae/astier:/users/snovae/frogshome/src

  which means that packages should be searched in my stuff and if not
  found there, in the common area.

  to compile these packeges, go in the mgr directory of each of them and run
  > cmt config
  > make


0.5) generate the doc (if you wish)
   go to the source directory and run doxygen
     (distribution : http://www.stack.nl/~dimitri/doxygen/download.html)
   you get html and latex docs in doc/html and doc/latex.
   html: (cd ../doc/html; netscape index.html &)
   latex: (cd ../doc/latex; make ps)

0.6) read paper doc:
   doc/refman.ps   
     
1) build the setup. (to be done only once)
   go to the mgr directory
   unix> cmt config

3) compile :

  run make form the mgr directory.
  To compile from emacs add 'cd ../mgr;' 
   in front of the proposed make command.

4) build a program with your own main (assume it is called extract.cc
   in the src directory)
  -  goto the mgr directory
  -  edit the requirement file and add the following lines
  application extract
  macro extractstamps $(MATCHBIN)/matchlib.stamp

  if your application requires some special libraries add a line like
  macro extract_linkopts '-L/a_weird_place -lweird_lib'
 
 
extract_linkopts should be filled with the libraries necessary
to link the application. here I assume that it uses
all the libraries defined in the 'use' lines of the requirement
file. To link also with the CERNLIB, assuming that CERN env var is 
correctly defined, I would just replace the line by:
   macro extract_linkopts "$(use_linkopts $(CERNLIB)"

extractstamps refers to the files that have to be put in the dependency
list for the executable. For each library, the make generated by
cmt builds an empty 'stamp' file. 

                              Pierre.

pierre.astier@in2p3.fr

