#+TITLE:       Poloka and =git=
#+AUTHOR:      Marc Betoule
#+DATE:        <2010-09-10 Fri>
#+EMAIL:       <marc.betoule@lpnhe.in2p3.fr>
#+DESCRIPTION: a short git survival kit.

To ease the project of slicing Poloka in several modules we are trying
to switch to git to manage the poloka repository.

Here is all you need to know to use the new poloka git tree. Skip
comments at first reading.

* Survival kit

** Install git (for mac users:
http://code.google.com/p/git-osx-installer/downloads/list?can=3&q=&sort=-uploaded&colspec=Filename+Summary+Uploaded+Size+DownloadCount)


** Get a copy of the central repository (previously export CVSROOT=...;cvs checkout poloka)

  =$ git clone "login"@lpnp204.in2p3.fr:/home/frogshome/git/poloka [ optional destination-path if not ./poloka ]=

** make changes, commit them, push them to the central repository

  =$ git commit -a=

  =$ git push=

*3 comments:*
- The reason why you need two commands instead of one is that you are
  now able to stay with local modifications (You have a complete copy
  of the tree and history which is the main difference with CVS). You
  can make several commits, revert the last, while keeping the central
  repository untouched. When you get confident with the status of your
  local tree, push all your modifications and modification history in
  one go.

- The =-a= option tells =git= to commit *all* the modifications since
  the last commit. If you omit it nothing will be commited, but the
  files explicitely added with =git add=.

- As =cvs=, =git= will complain if the status of the distant
  repository has changed since your last update. It will ask you to
  perform a =pull= first.


** Merge the central repository in the local repository (previously cvs update)

 =$ git pull=

*2 comments:*
- =git= will attempt to automatically merge the distant tree with your local
  tree. As in =cvs= this step may fail and require manual
  intervention. If this is the case:
  - Edit manually the conflicting files
  - Commit your solution (=git commit -a=)
  - Optionally, push the solution to the central repository

- =git= will complain if you attempt to pull the distant tree with
  uncommitted local changes. 2 solutions:
  - commit first : =git commit -a=
  - revert the uncommitted modifications : =git reset --hard= (*WARNING* these modifications will be lost if you do that. This is what you wanted, right ?)

* Comfortable use

** Playing with files :

- Adding a file

 =$ git add path=

- Removing a file

 =$ git rm path=

- Moving (renaming) a file

 =$ git mv path newpath=

** How to ...

- show commit logs:

 =$ git log=

- what did happen while I sleep ?

 =$ git log --since=="2 weeks ago"

- what did happen to this file toto.c since the beginning, even before he was renamed toto.c ?

 =$ git --follow toto.c=

- What did I change since my last commit

 =$ git diff=

- What changes in a file since between commit1 and commit2

 =$ git diff commit1..commit2 -- path/to/file=

  *Note:* commit1 and commit2 are (usually) the hash keys identifying
  each commit. You may retrieve them with the command =git log=.
  

** Branches

- Switching between branches:

 =$ git checkout branchname=

- Where am i (among other answers) ?

 =$ git status=

- Creating branches :

 =$ git branch branchname=

 =$ git checkout branchname=

- Pushing all branches to the central repository (as for other
  modifications this may remain local):

 =$ git push --all=

- merging branch =test= into =master=

 =$ git checkout master=

 =$ git merge test=

- kill branch test

 =$ git branch -D test=

- Setting up a local branch test to track the distant branch test

 =$ git checkout -b test origin/test=

** Tags

- Tagging the current state:

 =$ git tag tagname=

- Going back to a tagged state: 

 =$ git checkout tagname=

- Pushing local tags to the central tree (as for other
  modifications this may remain local):

 =$ git push --tags=


* I need help...

- on a specific command

 =$ man git-command=

- I want to learn

 =$ man gittutorial=

 =$ man gitcvs-migration=

 =$ man gitglossary= (answer to questions like what is HEAD or what does push mean ?)

 =$ man gitcore-tutorial=

