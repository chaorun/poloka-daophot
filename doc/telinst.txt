\page fitstoad_long Header Standardization

We explain here how FITS headers are presented with a consistent interface to the
other parts of the code.

\section fitstoad_api Definition and usage of the TOAD FITS keys

There is a set of mandatory and standard FITS keys, such as BITPIX,
CRPIX1,...But there is also a set of non-standard keys that each
combination of telescope/instrument has to define. poloka identifies
each such telescope/instrument (a telinst) very quickly on the fly, which gives a
consistency across instruments. An instrument might define the RON key
as readout noise, while another sets is as RDNOISE. For poloka, it
will be TOADRDON no matter which instrument. Here is a list of all the
poloka FITS key, with their default behaviour

- TOADTELE: telescope name - has to be defined
- TOADINST: instrument name - has to be defined
- TOADFILT: full name of the filter (default: key FILTER)
- TOADBAND: one character filter description (default: guess from FILTER)
- TOADEXPO: exposure time in seconds (default: key EXPTIME)
- TOADGAIN: gain of the amplifier in e-/ADU (default: key GAIN)
- TOADRDON: readout noise of the amplifier in e- (default: key RDNOISE)
- TOADRASC: right ascension of the target in HH:MM:SS (default: key RA)
- TOADDECL: declination of the target format DEG:MM:SS (default: key DEC)
- TOADEQUI: equinox of the coordinates for the target (default: key EQUINOX)
- TOADUTIM: Universal Time (default: key UT)
- TOADDATE: date in DD/MM/YYYY (default: key DATE-OBS or DATE)
- TOADMJD : modifier julian day (default: key MJD-ONS)
- TOADOBJE: the name of the targeted object (default: key OBJECT)
- TOADPIXS: plate scale in arcsec/pix (default: key PIXSCALE)
- TOADAIRM: airmass number for this exposure (default: key AIRMASS)
- TOADTYPE: type of data (OBJECT, DOMEFLAT, SKYFLAT, DARK, BIAS, FOCUS) (default: key IMAGETYP)
- TOADNAMP: number of amplifiers in the HDU (default: 1)
- TOADCHIP: number of the chip of the HDU (default: 1)
- TOADPZPT: magnitude zero point mag=-2.5*log10(ADU) + TOADPZPT (default: key ZEROUSNO)

Not all keys are always necessary depending on what kind of processing
needs to be done with the file. None of them are mandatory.

\section newtelinst Coding a new telinst

Here are the guidelines for the actual implementation of a new telinst.
You may use already coded stuff as an example.
There are several related instruments coded using derived classes 
in intwfc.cc.
you should first try a "header -k TOADALL <samplefile.fits>"
to see what does not work for your case(s) in the default implementation.

To code <yourtelinst>.cc:
- the best thing to do is to copy/paste one file that exists.
- in general you do not need include header files: your code will be included
  in fitstoad.cc after the utility routines you may need. If you refer
  to other poloka parts (such as wcsutils.h), include the correct header file.
- your class should derive (directly or not) from VirtualInstrument
- in most of the cases, your class will contain an Acceptor routine,
  i.e. the routine that indicates that a given header belongs to the
  class you are coding. In this likely case, put a comment containing 
  TYPE_SELECTOR on the same line as the class declaration.
  See already coded routines for the signature of Acceptor. Do not use
  "TOAD*" keys in the code of the Acceptor routine. You may easily
  figure out why!
- you have to define the 3 name routines (TelInstName, TelName, InstName)
- you have to define the toadkey translators for the keys which do not
  work by default. Use extensively the SIMPLE_TRANSLATOR and RETURN_A_VALUE
  macros defined in virtualinstrument.h. They protect you from trivial
  bugs, and will ease any future changes, if needed.

Not all TOAD keys are necessary for every task.
TOADPIXS is important: return something correct.
TOADEXPO is easy to map, do it if default does not apply.
There are routines provided to decode dates.


\section fitstoad_implementation  Implementation description and usage of fitstoad

  fitstoad.cc is the main file for presenting keys of FITS headers consistently
to the rest of the code, regardless of the instrument and its non
standard FITS keys.

  The chosen implementation is the following:
We have a VirtualInstrument class that interfaces the code
to actual instrument classes. This VirtualInstrument class
has about 20 (virtual) routines, most of them being the translation
of the TOAD keys. 

  fitstoad.cc contains the default implementation (VirtualInstrument)
and the interface to external world.

  The actual instruments are in a separate directory,
and if a file is removed from this directory, the code still
compiles and an instrument has disappeared. The consequence is that adding
an instrument involves the coding of one file, without any
modification elsewhere.

We also allow to use C++ resources about class derivation you may want
to use. For example, if some changes in the DAQ of a telescope involve
minor changes, it should be implemented as derived class of something
that already worked. The derived class should be in the same file as the base class
you want to derive it from, in order to control the ordering
in which the main "type" switch tries to match a given header
to the provided classes.

  For most of your actual headers, the default implementation 
(The VirtualInstrument routines) will provide the right behavior.

There is a test routine called if your require the pseudo key TOADALL.
(header -k TOADALL your_fitsfile invokes it)

  The provided instruments are in the directory telinst/*.cc. All
these files will be included in fitstoad.cc at compile time.
Some code is automatically generated from parsing these files (using grep and sed)
and generates alltelinst.cc and alltelinst.h
The "code generator" is in the Makefile.am.

This code generator collects the Acceptor routines,
and put all them in an array (AcceptorsArray). SniffTelInst tries all
components of the array and keeps the first match.
An Unknown class (placed at the end of the array)
ensures that there will be a successful match. 
You have a single way to control the ordering of
trials for related instruments. For classes in the
same file, "Acceptor" routines will be called
from last to first. If you derive an existing class,
you should put the derived class after the base class,
in the SAME file.

\section functions_for_flatfielding   Routines used  for flatfielding

  There are 4 routines related to flafielding:
\code
  Frame OverscanRegion(const FitsHeader &Head, const int Iamp) const;
  Frame TotalIlluRegion(const FitsHeader &Head) const;
  Frame IlluRegion(const FitsHeader &Head, const int Iamp) const;
  Frame AmpRegion(const FitsHeader &Head, const int Iamp) const;
\endcode

Do not bother with those if you do not plan to flatfield with TOADS.

\section guess_wcs  Guessing a rough WCS.

  The GuessLinWCS is used by matchusno, to figure which patch of the 
USNO catalog to use. If you have DbImages, try "matchusno -n
<your_db_image>" to see if it works by default.
The default WCS just assumes north-up east-left and that
RA and DEC refer to the center of the image (they are read
via RaDec2000, which cooks up values from TOADRASC, TOADDECL and TOADEQUI)

\section test_fitstoad Testing how it works
To test your implementation use :
header -k TOADALL <your_fitsfile>

\section type_tester Type testers:

If you want to generate a  "type tester" for your class, because there
are places in the code where you would like to put some instrument
dependent code, you have to place a comment containing TYPE_TESTER on
the line that declares your class (as for TYPE_SELECTOR). You then
have a routine 
\code
bool IsOfKind<YourBeautifulInstrument>(const FitsHeader &) 
\endcode
which is generated. (instanciated in the C++ jargon)

  you may now use it (with #include "fitstoad.h"):
\code
  if (IsOfKind<YourBeautifulInstrument>(head))
    {
       .... // specific processing
    }
\endcode

You should however try not to resort to such a scheme,
because it is breaking the instrument abstraction.
This may just mean that Virtual Instrument misses 
one functionality, that you may consider adding.
