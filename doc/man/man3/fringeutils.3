.TH "FringeUtils" 3 "8 Feb 2004" "toads" \" -*- nroff -*-
.ad l
.nh
.SH NAME
FringeUtils \- Utility class for fringe analysis. 
.SH SYNOPSIS
.br
.PP
\fC#include <fringeutils.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBFringeUtils\fR ()"
.br
.RI "\fIDefault Constructor.\fR"
.ti -1c
.RI "\fB~FringeUtils\fR ()"
.br
.RI "\fIDefault Destructor.\fR"
.in -1c
.SS Static Public Methods

.in +1c
.ti -1c
.RI "bool \fBIsSameSize\fR (\fBImage\fR &Img1, \fBImage\fR &Img2)"
.br
.RI "\fIChecks whether images have same size or not.\fR"
.ti -1c
.RI "double \fBScalarProduct\fR (\fBImage\fR &Img1, \fBImage\fR &Img2, float nsigma)"
.br
.RI "\fIComputes Scalar Product.\fR"
.ti -1c
.RI "void \fBSmoothFilter\fR (\fBImage\fR &Img)"
.br
.RI "\fISmooth an image.\fR"
.ti -1c
.RI "double* \fBScalarProductMatrix\fR (vector< string > &filelist)"
.br
.RI "\fIScalarProductMatrix is a symmetric matrix n*n computed with n images in a FitsFileSet.\fR"
.ti -1c
.RI "void \fBClearImage\fR (\fBImage\fR &Img, const double NSigma)"
.br
.RI "\fIClear an image.\fR"
.ti -1c
.RI "void \fBNormalize\fR (\fBImage\fR &img, const float nsigma_cut=3)"
.br
.RI "\fINormalize an image -> (mean=0, rms=1).\fR"
.ti -1c
.RI "int \fBGreatestCommonDivider\fR (int a, int b)"
.br
.RI "\fIGreatest Common Divider.\fR"
.ti -1c
.RI "void \fBClippedAverageRms\fR (double *pixelValues, const int count, double &average, double &rms)"
.br
.RI "\fIClipped average and rms.\fR"
.ti -1c
.RI "string \fBGetVersion\fR ()"
.br
.RI "\fIReturns the CVS version of this piece of code.\fR"
.ti -1c
.RI "int \fBRemoveFringes\fR (\fBFitsImage\fR &image, const string &fringefilename, int nvec=0, float nsig=3, bool substractbg=false, bool verbose=true)"
.br
.RI "\fIRemove fringes in an image.\fR"
.ti -1c
.RI "bool \fBIsDefringed\fR (const \fBFitsImage\fR &image)"
.br
.RI "\fIChecks whether this image is defringed or not.\fR"
.ti -1c
.RI "bool \fBIsDefringedWithNewMethod\fR (const \fBFitsImage\fR &image)"
.br
.RI "\fIChecks whether this image is defringed or not with the new method.\fR"
.ti -1c
.RI "bool \fBIsANewFringePattern\fR (const string &filename)"
.br
.RI "\fIChecks whether this image is a fringe pattern.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Utility class for fringe analysis.
.PP
Used by fringefinder and defringe2 
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS void FringeUtils::ClearImage (\fBImage\fR & Img, const double NSigma)\fC [static]\fR
.PP
Clear an image.
.PP
Set pixels values to 0 if fabs(value-mean)>NSigma*rms 
.SS void FringeUtils::Normalize (\fBImage\fR & img, const float nsigma_cut = 3)\fC [static]\fR
.PP
Normalize an image -> (mean=0, rms=1).
.PP
Only considers pixels for fabs(value-mean)>nsigma_cut*rms (default nsigma_cut=3) 
.SS int FringeUtils::RemoveFringes (\fBFitsImage\fR & image, const string & fringefilename, int nvec = 0, float nsig = 3, bool substractbg = false, bool verbose = true)\fC [static]\fR
.PP
Remove fringes in an image.
.PP
\fBReturns: \fR
.in +1c
0 is everything is ok 
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fIimage\fR\fR
must be in RW mode 
.TP
\fB\fIfringemapname\fR\fR
name of the FITS file containing fringe patterns (one or several) 
.TP
\fB\fInvec\fR\fR
max number of vectors to use (default=0 means all of them) 
.TP
\fB\fInsig\fR\fR
cut on the image for the ScalarProduct (default=3), this cut is set to 5 for the fringes 
.TP
\fB\fIsubstractbg\fR\fR
if true, substract background using imageback before removing fringes  (and put it back afterwards) (default is false) 
.TP
\fB\fIverbose\fR\fR
if true prints a lot of stuff (default is true) 
.SS double FringeUtils::ScalarProduct (\fBImage\fR & Img1, \fBImage\fR & Img2, float nsigma)\fC [static]\fR
.PP
Computes Scalar Product.
.PP
\fBReturns: \fR
.in +1c
1/p*sum(Img1(i)*Img2(i)) for( Img1(i)>nsigma*sigma1i && Img2(i)>nsigma*sigma2i ) if nsigma<0 (default), no cut is applied 
.SS double* FringeUtils::ScalarProductMatrix (vector< string > & filelist)\fC [static]\fR
.PP
ScalarProductMatrix is a symmetric matrix n*n computed with n images in a FitsFileSet.
.PP
Each element is the ScalarProduct(Image_i,Image_j)  
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fIFitsFileSet\fR\fR
set of images 
.PP
\fBReturns: \fR
.in +1c
double array[n*n] containing the matrix 
.SS void FringeUtils::SmoothFilter (\fBImage\fR & Img)\fC [static]\fR
.PP
Smooth an image.
.PP
Convolution of \fBImage\fR Img with a smoothing filter 3x3 0.025, 0.100, 0.025 0.100, 0.500, 0.100 0.025, 0.100, 0.025 

.SH AUTHOR
.PP 
Generated automatically by Doxygen for toads from the source code.