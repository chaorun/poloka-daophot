.TH "GtransfoQuad" 3 "8 Feb 2004" "toads" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GtransfoQuad \- implements the quadratic transformations (12 real coefficients). 
.SH SYNOPSIS
.br
.PP
\fC#include <gtransfo.h>\fR
.PP
Inherits \fBGtransfoLin\fR.
.PP
Inherited by \fBGtransfoCub\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBGtransfoQuad\fR ()"
.br
.RI "\fIthe default constructor constructs the do-nothing transformation.\fR"
.ti -1c
.RI "\fBGtransfoQuad\fR (const \fBGtransfoLin\fR &Lin)"
.br
.RI "\fIupgrade a linear transfo to a Quad one.\fR"
.ti -1c
.RI "GtransfoQuad \fBoperator *\fR (const \fBGtransfoLin\fR &R) const"
.br
.RI "\fIenables to combine linear tranformations: T1=T2*T3 is legal.\fR"
.ti -1c
.RI "void \fBapply\fR (const double Xin, const double Yin, double &Xout, double &Yout) const"
.br
.ti -1c
.RI "void \fBdump\fR (ostream &stream=cout) const"
.br
.RI "\fIdumps the transfo coefficients to stream.\fR"
.ti -1c
.RI "double \fBfit\fR (const StarMatchList &List, const \fBGtransfo\fR *PriorTransfo=NULL, const \fBGtransfo\fR *PosteriorTransfo=NULL)"
.br
.RI "\fIfits a transfo to a list of star pairs (p1,p2).\fR"
.ti -1c
.RI "\fBGtransfo\fR* \fBClone\fR () const"
.br
.RI "\fIreturns a copy (allocated by new) of the transformation.\fR"
.ti -1c
.RI "\fBGtransfo\fR* \fBReduceCompo\fR (const \fBGtransfo\fR *Right) const"
.br
.RI "\fIallow composition of transformations regardless of their actual types.see \fBGtransfoCompose\fR() for a user callable entry.\fR"
.ti -1c
.RI "\fBGtransfo\fR* \fBInverseTransfo\fR (const double Precision, const \fBFrame\fR &Region) const"
.br
.RI "\fIreturns an inverse transfo.\fR"
.ti -1c
.RI "void \fBDerivative\fR (const \fBPoint\fR &Where, \fBGtransfoLin\fR &Derivative, const double Step=0.01) const"
.br
.RI "\fIComputes the local Derivative of a transfo. Step is used for numerical derivation.\fR"
.ti -1c
.RI "\fBGtransfoLin\fR \fBLinearApproximation\fR (const \fBPoint\fR &Where, const double step=0.01) const"
.br
.RI "\fIlinear (local) approximation.\fR"
.ti -1c
.RI "double \fBA1X2\fR () const"
.br
.ti -1c
.RI "double \fBA1XY\fR () const"
.br
.ti -1c
.RI "double \fBA1Y2\fR () const"
.br
.ti -1c
.RI "double \fBA2X2\fR () const"
.br
.ti -1c
.RI "double \fBA2XY\fR () const"
.br
.ti -1c
.RI "double \fBA2Y2\fR () const"
.br
.ti -1c
.RI "int \fBNpar\fR () const"
.br
.RI "\fIreturns the number of parameters (to compute chi2's).\fR"
.ti -1c
.RI "virtual int \fBDegree\fR () const"
.br
.ti -1c
.RI "\fBGtransfoQuad\fR (double ox, double oy, double aa11, double aa12, double aa21, double aa22, double aa1x2, double aa1xy, double aa1y2, double aa2x2, double aa2xy, double aa2y2)"
.br
.in -1c
.SS Protected Methods

.in +1c
.ti -1c
.RI "void \fBidentity\fR ()"
.br
.in -1c
.SS Protected Attributes

.in +1c
.ti -1c
.RI "double \fBa1x2\fR"
.br
.ti -1c
.RI "double \fBa1xy\fR"
.br
.ti -1c
.RI "double \fBa1y2\fR"
.br
.ti -1c
.RI "double \fBa2x2\fR"
.br
.ti -1c
.RI "double \fBa2xy\fR"
.br
.ti -1c
.RI "double \fBa2y2\fR"
.br
.in -1c
.SS Friends

.in +1c
.ti -1c
.RI "class \fBoperator *\fR"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
implements the quadratic transformations (12 real coefficients).
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS void GtransfoQuad::Derivative (const \fBPoint\fR & Where, \fBGtransfoLin\fR & Derivative, const double Step = 0.01) const\fC [virtual]\fR
.PP
Computes the local Derivative of a transfo. Step is used for numerical derivation.
.PP
the Derivative is represented by a \fBGtransfoLin\fR, in which (hopefully), the offset terms are zero. Derivative should  transform a vector of offsets into a vector of offsets. 
.PP
Reimplemented from \fBGtransfoLin\fR.
.SS \fBGtransfo\fR* GtransfoQuad::InverseTransfo (const double Precision, const \fBFrame\fR & Region) const\fC [virtual]\fR
.PP
returns an inverse transfo.
.PP
Precision and Region refer to the "input" side of this,  and hence to the output side of the returned \fBGtransfo\fR. 
.PP
Reimplemented from \fBGtransfoLin\fR.
.SS double GtransfoQuad::fit (const StarMatchList & List, const \fBGtransfo\fR * PriorTransfo = NULL, const \fBGtransfo\fR * PosteriorTransfo = NULL)\fC [virtual]\fR
.PP
fits a transfo to a list of star pairs (p1,p2).
.PP
After the fit this(PriorTransfo(p1)) yields approximately PosteriorTransfo(p2). The returned value is the chi2. 
.PP
Reimplemented from \fBGtransfoLin\fR.
.PP
Reimplemented in \fBGtransfoCub\fR.

.SH AUTHOR
.PP 
Generated automatically by Doxygen for toads from the source code.