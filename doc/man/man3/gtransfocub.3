.TH "GtransfoCub" 3 "8 Feb 2004" "toads" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GtransfoCub \- implements the cubic transformations (20 real coefficients). 
.SH SYNOPSIS
.br
.PP
\fC#include <gtransfo.h>\fR
.PP
Inherits \fBGtransfoQuad\fR.
.PP
.SS Public Types

.in +1c
.ti -1c
.RI "enum \fBOldOrNew\fR { \fBOld\fR, \fBNew\fR }"
.br
.in -1c
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBGtransfoCub\fR ()"
.br
.RI "\fIthe default constructor constructs the do-nothing transformation.\fR"
.ti -1c
.RI "\fBGtransfoCub\fR (const \fBGtransfoLin\fR &Lin)"
.br
.RI "\fIupgrade a linear transfo to a cubic one.\fR"
.ti -1c
.RI "\fBGtransfoCub\fR (const \fBGtransfoQuad\fR &Quad)"
.br
.RI "\fIupgrade a quadratic transfo to a cubic one.\fR"
.ti -1c
.RI "void \fBapply\fR (const double Xin, const double Yin, double &Xout, double &Yout) const"
.br
.ti -1c
.RI "\fBPoint\fR \fBapply\fR (const \fBPoint\fR &Pin)"
.br
.ti -1c
.RI "void \fBdump\fR (ostream &stream=cout) const"
.br
.RI "\fIdumps the transfo coefficients to stream.\fR"
.ti -1c
.RI "double \fBfit\fR (const StarMatchList &List, const \fBGtransfo\fR *PriorTransfo=NULL, const \fBGtransfo\fR *PosteriorTransfo=NULL)"
.br
.ti -1c
.RI "\fBGtransfo\fR* \fBClone\fR () const"
.br
.RI "\fIreturns a copy (allocated by new) of the transformation.\fR"
.ti -1c
.RI "\fBGtransfo\fR* \fBReduceCompo\fR (const \fBGtransfo\fR *Right) const"
.br
.RI "\fIallow composition of transformations regardless of their actual types.see \fBGtransfoCompose\fR() for a user callable entry.\fR"
.ti -1c
.RI "double \fBdX\fR () const"
.br
.ti -1c
.RI "double \fBdY\fR () const"
.br
.ti -1c
.RI "double \fBA11\fR () const"
.br
.ti -1c
.RI "double \fBA12\fR () const"
.br
.ti -1c
.RI "double \fBA21\fR () const"
.br
.ti -1c
.RI "double \fBA22\fR () const"
.br
.ti -1c
.RI "double \fBA1X2\fR () const"
.br
.ti -1c
.RI "double \fBA1XY\fR () const"
.br
.ti -1c
.RI "double \fBA1Y2\fR () const"
.br
.ti -1c
.RI "double \fBA2X2\fR () const"
.br
.ti -1c
.RI "double \fBA2XY\fR () const"
.br
.ti -1c
.RI "double \fBA2Y2\fR () const"
.br
.ti -1c
.RI "double \fBA1X3\fR () const"
.br
.ti -1c
.RI "double \fBA1X2Y\fR () const"
.br
.ti -1c
.RI "double \fBA1XY2\fR () const"
.br
.ti -1c
.RI "double \fBA1Y3\fR () const"
.br
.ti -1c
.RI "double \fBA2X3\fR () const"
.br
.ti -1c
.RI "double \fBA2X2Y\fR () const"
.br
.ti -1c
.RI "double \fBA2XY2\fR () const"
.br
.ti -1c
.RI "double \fBA2Y3\fR () const"
.br
.ti -1c
.RI "void \fBGetValues\fR (vector< \fBNamedValue\fR > &Values, const OldOrNew WhichNames=New) const"
.br
.ti -1c
.RI "void \fBSetValues\fR (vector< \fBNamedValue\fR > &Values)"
.br
.ti -1c
.RI "int \fBNpar\fR () const"
.br
.RI "\fIreturns the number of parameters (to compute chi2's).\fR"
.ti -1c
.RI "virtual int \fBDegree\fR () const"
.br
.in -1c
.SS Protected Methods

.in +1c
.ti -1c
.RI "void \fBidentity\fR ()"
.br
.in -1c
.SS Protected Attributes

.in +1c
.ti -1c
.RI "double \fBa1x3\fR"
.br
.ti -1c
.RI "double \fBa1x2y\fR"
.br
.ti -1c
.RI "double \fBa1xy2\fR"
.br
.ti -1c
.RI "double \fBa1y3\fR"
.br
.ti -1c
.RI "double \fBa2x3\fR"
.br
.ti -1c
.RI "double \fBa2x2y\fR"
.br
.ti -1c
.RI "double \fBa2xy2\fR"
.br
.ti -1c
.RI "double \fBa2y3\fR"
.br
.in -1c
.SS Friends

.in +1c
.ti -1c
.RI "GtransfoCub \fBoperator *\fR (const GtransfoCub &L, const \fBGtransfoLin\fR &R)"
.br
.RI "\fICub*Lin.\fR"
.ti -1c
.RI "GtransfoCub \fBoperator *\fR (const \fBGtransfoLin\fR &L, const GtransfoCub &R)"
.br
.RI "\fILin*Cub.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 
implements the cubic transformations (20 real coefficients).
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS double GtransfoCub::fit (const StarMatchList & List, const \fBGtransfo\fR * PriorTransfo = NULL, const \fBGtransfo\fR * PosteriorTransfo = NULL)\fC [virtual]\fR
.PP
fits a transfo to a list of star pairs (p1,p2). After the fit this(PriorTransfo(p1)) yields approximately p2. The returned value is the chi2. 
.PP
Reimplemented from \fBGtransfoQuad\fR.

.SH AUTHOR
.PP 
Generated automatically by Doxygen for toads from the source code.