.TH "FastFinder" 3 "8 Feb 2004" "toads" \" -*- nroff -*-
.ad l
.nh
.SH NAME
FastFinder \- Fast locator in starlists. 
.SH SYNOPSIS
.br
.PP
\fC#include <fastfinder.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBFastFinder\fR (const BaseStarList &List)"
.br
.RI "\fI-.\fR"
.ti -1c
.RI "\fB~FastFinder\fR ()"
.br
.ti -1c
.RI "const \fBBaseStar\fR* \fBFindClosest\fR (const \fBPoint\fR &Where, const double MaxDist, bool(*SkipIt)(const \fBBaseStar\fR *)=NULL) const"
.br
.RI "\fI-.\fR"
.ti -1c
.RI "void \fBdump\fR () const"
.br
.ti -1c
.RI "Iterator \fBbegin_scan\fR (const \fBPoint\fR &Where, const double &MaxDist) const"
.br
.ti -1c
.RI "void \fByslice\fR (const int iSlice, const double YStart, const double YEnd, const \fBBaseStar\fR **&Start, const \fBBaseStar\fR **&End) const"
.br
.ti -1c
.RI "const \fBBaseStar\fR** \fBlocate_y_start\fR (const \fBBaseStar\fR **Begin, const \fBBaseStar\fR **End, const double &YVal) const"
.br
.ti -1c
.RI "const \fBBaseStar\fR** \fBlocate_y_end\fR (const \fBBaseStar\fR **Begin, const \fBBaseStar\fR **End, const double &YVal) const"
.br
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "const \fBBaseStar\fR** \fBstars\fR"
.br
.ti -1c
.RI "double \fBxmin\fR"
.br
.ti -1c
.RI "double \fBxmax\fR"
.br
.ti -1c
.RI "double \fBxstep\fR"
.br
.ti -1c
.RI "int \fBnslice\fR"
.br
.ti -1c
.RI "int* \fBindex\fR"
.br
.ti -1c
.RI "int \fBcount\fR"
.br
.ti -1c
.RI "const BaseStarList* \fBbaselist\fR"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Fast locator in starlists.
.PP
This is an auxillary class for matching objects from starlists. It allows to locate rapidly the closest objects from a given position. The very simple strategy is to sort objects according to 1 coordinate x, and to build an index that allows to select the objects with the x coordinate inside an interval. Then every slice in x is sorted according to y, which enables  a fast scan inside a x slice. ListMatchCollect takes about 10ms (PC 450 MHz, optimized "-O4")  for a match between lists of about 2000 objects each, which is fast enough for our needs. The same "locator" is used in ListMatchupShift, to avoid scanning the whole input lists. Timing on ListMatchCollect and ListMatchupShift indicates a gain in speed by more than one order after implementation of this FastFinder. One should not delete objects in the list passed to the  FastFinder constructor during the whole life of the FastFinder object. 
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for toads from the source code.