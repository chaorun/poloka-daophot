.TH "ReducedImage" 3 "8 Feb 2004" "toads" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ReducedImage \- a handle to access data associated to an image: the fits file, the catalog, the dead and satur frames, and a set of 'scalars' such as seeing, saturation level &co. 
.SH SYNOPSIS
.br
.PP
\fC#include <reducedimage.h>\fR
.PP
Inherits \fBDbImage\fR, and RefCount.
.PP
Inherited by \fBImageSubtraction\fR, \fBImageSum\fR, \fBNight\fR, \fBSubImage\fR, and \fBTransformedImage\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBReducedImage\fR ()"
.br
.ti -1c
.RI "\fBReducedImage\fR (const \fBDbImage\fR &)"
.br
.ti -1c
.RI "\fBReducedImage\fR (const string &Name)"
.br
.ti -1c
.RI "bool \fBHasImage\fR () const"
.br
.ti -1c
.RI "bool \fBHasBack\fR () const"
.br
.ti -1c
.RI "bool \fBHasMiniBack\fR () const"
.br
.ti -1c
.RI "bool \fBHasCatalog\fR () const"
.br
.ti -1c
.RI "bool \fBHasDead\fR () const"
.br
.ti -1c
.RI "bool \fBHasFlat\fR () const"
.br
.ti -1c
.RI "bool \fBHasSatur\fR () const"
.br
.ti -1c
.RI "bool \fBHasCosmic\fR () const"
.br
.ti -1c
.RI "bool \fBHasSatellite\fR () const"
.br
.ti -1c
.RI "bool \fBHasWeight\fR () const"
.br
.ti -1c
.RI "bool \fBHasBad\fR () const"
.br
.ti -1c
.RI "string \fBFitsName\fR () const"
.br
.RI "\fInot const because it may actually compute the image and other things (for derived class).\fR"
.ti -1c
.RI "virtual bool \fBMakeFits\fR ()"
.br
.RI "\fIproduce fits image.\fR"
.ti -1c
.RI "string \fBCatalogName\fR () const"
.br
.ti -1c
.RI "void \fBFillSExtractorData\fR (ForSExtractor &data, bool fond_deja_soustrait, bool sauver_fond, bool use_sigma_header)"
.br
.ti -1c
.RI "bool \fBRecoverBack\fR (bool add_to_im)"
.br
.ti -1c
.RI "bool \fBReAddBackground_and_ResetKeys\fR ()"
.br
.ti -1c
.RI "bool \fBMakeCatalog\fR (bool redo_from_beg, bool overwrite, bool savemasksat, bool pas_sub_fond, bool use_sigma_header)"
.br
.ti -1c
.RI "virtual bool \fBMakeCatalog\fR ()"
.br
.RI "\fIProduce the Saturated stars pixels mask, subtract the image background, detect with the SExtractor computed sigma. search the cosmics, and update catalog and weight for cosmics. No free coffee.\fR"
.ti -1c
.RI "bool \fBMakeCatalog_ImageBizarre\fR ()"
.br
.RI "\fI\fBMakeCatalog_ImageBizarre\fR() is for sum-images, or convolved images, for which we do not want to subtract the background map, nor computing the saturated pixels map, and for which we provide the value of the sigmabackground. overwrite is set to true.\fR"
.ti -1c
.RI "virtual bool \fBMakeSatur\fR ()"
.br
.RI "\fIproduce satur image.\fR"
.ti -1c
.RI "virtual bool \fBMakeDead\fR ()"
.br
.RI "\fIproduce dead image.\fR"
.ti -1c
.RI "void \fBFlagCosmicsInCatalog\fR (const \fBImage\fR &CosmicImage, const double dist=2)"
.br
.ti -1c
.RI "virtual bool \fBMakeCosmic\fR ()"
.br
.RI "\fIproduce cosmic image.\fR"
.ti -1c
.RI "virtual bool \fBMakeSatellite\fR ()"
.br
.RI "\fIproduce satellite image.\fR"
.ti -1c
.RI "bool \fBIsToadsWeight\fR ()"
.br
.RI "\fIproduce weight image.\fR"
.ti -1c
.RI "virtual bool \fBMakeWeight\fR ()"
.br
.ti -1c
.RI "virtual bool \fBMakeBad\fR ()"
.br
.RI "\fIproduce bad pixel image.\fR"
.ti -1c
.RI "bool \fBActuallyReduced\fR () const"
.br
.RI "\fIreturns if both fits image and catalog file exist.\fR"
.ti -1c
.RI "bool \fBExecute\fR (const int ToDo)"
.br
.RI "\fIshorthand call for Make{Fits,Catalog,Dead,Satur}. ToDo may conveniently be contructed using predefined tags DoFits DoCatalog DoDead DoSatur.\fR"
.ti -1c
.RI "string \fBTypeName\fR () const"
.br
.ti -1c
.RI "bool \fBSetTypeName\fR (const string &TypeName)"
.br
.ti -1c
.RI "string \fBTypeFileName\fR () const"
.br
.ti -1c
.RI "virtual void \fBdump\fR (ostream &s=cout) const"
.br
.RI "\fIdumps basic info.\fR"
.ti -1c
.RI "int \fBXSize\fR () const"
.br
.RI "\fIsize in x-axis.\fR"
.ti -1c
.RI "int \fBYSize\fR () const"
.br
.RI "\fIsize in y-axis.\fR"
.ti -1c
.RI "double \fBSeeing\fR () const"
.br
.RI "\fIbasic seeing.\fR"
.ti -1c
.RI "void \fBRemoveSeeing\fR ()"
.br
.ti -1c
.RI "bool \fBSetSeeing\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "bool \fBGetPsfShapeParams\fR (double &SigmaX, double &SigmaY, double &ThetaXY) const"
.br
.RI "\fIbasic PSF shape parameters.\fR"
.ti -1c
.RI "bool \fBSetPsfShapeParams\fR (const double &SigmaX, const double &SigmaY, const double &ThetaXY, const string Comment="")"
.br
.ti -1c
.RI "bool \fBGetRaDecEpoch\fR (double &Ra, double &Dec, double &Epoch) const"
.br
.RI "\fIbasic coordinates.\fR"
.ti -1c
.RI "bool \fBSetRaDecEpoch\fR (const double &Ra, const double &Dec, const double &Epoch, const string Comment="")"
.br
.ti -1c
.RI "void \fBRemoveBackLevel\fR ()"
.br
.RI "\fIthe (average) sky level as it should appear on the image.\fR"
.ti -1c
.RI "double \fBBackLevel\fR () const"
.br
.ti -1c
.RI "bool \fBSetBackLevel\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "bool \fBSetSESky\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "void \fBRemoveSESky\fR ()"
.br
.ti -1c
.RI "double \fBOriginalSkyLevel\fR () const"
.br
.RI "\fIthe (average) sky level at it would appear if not subtracted.\fR"
.ti -1c
.RI "bool \fBSetOriginalSkyLevel\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "bool \fBIsSkySub\fR () const"
.br
.RI "\fIcheck if the sky background has been subtracted.\fR"
.ti -1c
.RI "double \fBSigmaBack\fR () const"
.br
.RI "\fIr.m.s of background.\fR"
.ti -1c
.RI "bool \fBSetSigmaBack\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "bool \fBSetSESigma\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "void \fBRemoveSESigma\fR ()"
.br
.ti -1c
.RI "double \fBNoisePow\fR () const"
.br
.RI "\fIactual noise in the image.\fR"
.ti -1c
.RI "bool \fBSetNoisePow\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "bool \fBBackSub\fR () const"
.br
.RI "\fIwether background was subtracted or not.\fR"
.ti -1c
.RI "bool \fBSetBackSub\fR (const bool &Value, const string Comment="")"
.br
.ti -1c
.RI "double \fBSaturation\fR () const"
.br
.RI "\fIcurrent saturation level.\fR"
.ti -1c
.RI "bool \fBSetSaturation\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "double \fBOriginalSaturation\fR () const"
.br
.RI "\fIorginal saturation level.\fR"
.ti -1c
.RI "bool \fBSetOriginalSaturation\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "double \fBExposure\fR () const"
.br
.RI "\fIexposure time.\fR"
.ti -1c
.RI "bool \fBSetExposure\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "double \fBZeroPoint\fR () const"
.br
.RI "\fIzero point as measured with USNO Catalog.\fR"
.ti -1c
.RI "bool \fBSetZeroPoint\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "double \fBZerop\fR () const"
.br
.RI "\fIZero \fBPoint\fR as computed from instrument specifications.\fR"
.ti -1c
.RI "bool \fBSetZerop\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "double \fBZP0\fR () const"
.br
.RI "\fIzero point from ZP0 key, a Zero \fBPoint\fR that was once thought to be good ......\fR"
.ti -1c
.RI "bool \fBSetZP0\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "bool \fBHasZP0\fR () const"
.br
.ti -1c
.RI "double \fBZP\fR () const"
.br
.RI "\fIzero point from ZP key, supposed to be better than ZP0.\fR"
.ti -1c
.RI "bool \fBSetZP\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "bool \fBHasZP\fR () const"
.br
.ti -1c
.RI "double \fBZZZeroP\fR () const"
.br
.RI "\fIZero \fBPoint\fR set by toads : read for 1 image (photometric ref) with AnyZeroPoint routine and then propagated according to the relationship to this image. The key is ZPTOADS, NOT to be set by hand or by an exterior job. thus is present only if it was set priorily in a TOADS program (for example on the sub in sub.cc). Otherwise use \fBAnyZeroPoint\fR().\fR"
.ti -1c
.RI "bool \fBHasZZZeroP\fR () const"
.br
.ti -1c
.RI "bool \fBSetZZZeroP\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "void \fBRemoveZZZeroP\fR ()"
.br
.ti -1c
.RI "double \fBAnyZeroPoint\fR () const"
.br
.RI "\fIgives Zero \fBPoint\fR by order of prefrence: ZZZeroP, then ZP, then ZP0, then Zerop.\fR"
.ti -1c
.RI "string \fBDate\fR () const"
.br
.RI "\fIdate of observation.\fR"
.ti -1c
.RI "bool \fBSetDate\fR (const string &Value, const string Comment="")"
.br
.ti -1c
.RI "string \fBTimeObs\fR () const"
.br
.RI "\fItime of observation.\fR"
.ti -1c
.RI "bool \fBSetTimeObs\fR (const string &Value, const string Comment="")"
.br
.ti -1c
.RI "double \fBJulianDate\fR () const"
.br
.RI "\fIreduced julian date of observation.\fR"
.ti -1c
.RI "bool \fBSetJulianDate\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "double \fBSignalToNoise23\fR () const"
.br
.RI "\fIsignal to noise at magnitude 23.\fR"
.ti -1c
.RI "bool \fBSetSignalToNoise23\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "string \fBInstrument\fR () const"
.br
.RI "\fIinstrument used.\fR"
.ti -1c
.RI "string \fBTelescope\fR () const"
.br
.RI "\fItelescope used.\fR"
.ti -1c
.RI "int \fBChip\fR () const"
.br
.RI "\fIchip used.\fR"
.ti -1c
.RI "bool \fBSetChip\fR (const int &Value, const string Comment="")"
.br
.ti -1c
.RI "string \fBTarget\fR () const"
.br
.RI "\fItarget aimed at.\fR"
.ti -1c
.RI "bool \fBSetTarget\fR (const string &Value, const string Comment="")"
.br
.ti -1c
.RI "string \fBFilter\fR () const"
.br
.RI "\fIfilter band.\fR"
.ti -1c
.RI "bool \fBSetFilter\fR (const string &Value, const string Comment="")"
.br
.ti -1c
.RI "string \fBBand\fR () const"
.br
.RI "\fIfilter band.\fR"
.ti -1c
.RI "bool \fBSetBand\fR (const string &Value, const string Comment="")"
.br
.ti -1c
.RI "double \fBFlatFieldNoise\fR () const"
.br
.RI "\fIflatfielding noise.\fR"
.ti -1c
.RI "bool \fBSetFlatFieldNoise\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "double \fBProfileError\fR () const"
.br
.RI "\fIPSF error noise.\fR"
.ti -1c
.RI "bool \fBSetProfileError\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "double \fBReadoutNoise\fR () const"
.br
.RI "\fIread out noise.\fR"
.ti -1c
.RI "bool \fBSetReadoutNoise\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "double \fBGain\fR () const"
.br
.RI "\fIgain.\fR"
.ti -1c
.RI "bool \fBSetGain\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "bool \fBSetOldGain\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "double \fBPixelSize\fR () const"
.br
.RI "\fIpixel size in arcsec.\fR"
.ti -1c
.RI "bool \fBSetPixelSize\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "double \fBRaDeg2000\fR () const"
.br
.RI "\fIright ascension in degree (J2000).\fR"
.ti -1c
.RI "bool \fBSetRaDeg2000\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "double \fBDecDeg2000\fR () const"
.br
.RI "\fIdeclination in degree (J2000).\fR"
.ti -1c
.RI "bool \fBSetDecDeg2000\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "double \fBEpoch\fR () const"
.br
.RI "\fIepoch.\fR"
.ti -1c
.RI "bool \fBSetEpoch\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "double \fBAirmass\fR () const"
.br
.ti -1c
.RI "bool \fBSetAirmass\fR (const double &Value, const string Comment="")"
.br
.ti -1c
.RI "string \fBPhotomReference\fR () const"
.br
.RI "\fIphotometric reference (i.e. image that should have the same flux).\fR"
.ti -1c
.RI "bool \fBSetPhotomReference\fR (const string &Value, const string Comment="")"
.br
.ti -1c
.RI "\fBFrame\fR \fBUsablePart\fR () const"
.br
.RI "\fIusable part defined by a frame keyword in the header.\fR"
.ti -1c
.RI "bool \fBSetUsablePart\fR (const \fBFrame\fR &NewFrame)"
.br
.ti -1c
.RI "\fBFrame\fR \fBPhysicalSize\fR () const"
.br
.RI "\fIthe actual physical size (pixels) of the image.\fR"
.ti -1c
.RI "bool \fBIsGoodImage\fR () const"
.br
.ti -1c
.RI "double \fBOverlapArcmin2\fR (const ReducedImage &Other) const"
.br
.RI "\fIreturns the overlapping area in arcmin^2 with another reducedimage.\fR"
.ti -1c
.RI "bool \fBSameChipFilterInst\fR (const ReducedImage &Another, const bool Warn=true) const"
.br
.RI "\fIfitsheader equivalent.\fR"
.ti -1c
.RI "bool \fBSamePhysicalSize\fR (const ReducedImage &OtherImage) const"
.br
.RI "\fIcheck that (Fits) images have the same sizes.\fR"
.ti -1c
.RI "double \fBMultiplyGain\fR ()"
.br
.RI "\fIMultiply images by gain when not =1 (after stacking for example).\fR"
.ti -1c
.RI "virtual ReducedImage* \fBClone\fR () const"
.br
.ti -1c
.RI "virtual \fB~ReducedImage\fR ()"
.br
.in -1c
.SS Friends

.in +1c
.ti -1c
.RI "class \fBoperator<<\fR"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
a handle to access data associated to an image: the fits file, the catalog, the dead and satur frames, and a set of 'scalars' such as seeing, saturation level &co.
.PP
.PP
 This class is meant to be derived. One should provide a correct Clone routine in  derived classes. It is also important for ReducedImageList code  performance that derivations remain small and fast to copy, in particular,  they should not contain actual \fBImage\fR's. 
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for toads from the source code.