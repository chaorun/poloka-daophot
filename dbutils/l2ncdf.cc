#include "list_utils.c"
#include <netcdf.hh>


/* this tools is intended to transform ascii files generated by toads
into netcdf stuff (for idl). It not only eases the decoding, but also
enables to adress columns by name:


shell > l2ncdf test.list test.ncd
...
idl> ncid = ncdf_open('test.ncd') 
idl> ncdf_varget,ncid,'x1',x1
....


l2tup is a similar tool to produce ntuples suitable for paw.

*/

void nc_handle_error(NcFile& file, const char *Message, const char *M2 = " ")
{
if (!file.is_valid())
  {
    cerr << Message << ' ' << M2 << endl;
    exit(0);
  }
}



#include <vector.h>

struct Store : public vector<float*> { 
  int ncol;
  int nrow;

  Store(const int Ncol) : ncol(Ncol) {};
  void AddRow(const float *Row) 
  { float *x = new float[ncol]; memcpy(x,Row,ncol*sizeof(float)); push_back(x);} 
  ~Store() { for (unsigned int i=0; i<size(); ++i) delete [] (*this)[i];}

};


void store_fill(int *Data, float *x)
{
  Store *AStore = (Store *) Data;
  AStore->AddRow(x);
}
      
  

int make_ncdf(const char *AsciiName, char* NcdfFileName)
{
  FILE *in;
  char **tags;
  int dim;
  in = fopen(AsciiName,"r");
  if (!in) 
    {
      printf(" cannot open %s\n",AsciiName);
      return 0;
    }
  tags = decode_tags(in, &dim);
  if (!tags) return 0;
  NcFile ncfile(NcdfFileName, NcFile::Replace);
  nc_handle_error(ncfile,"cannot open file", NcdfFileName);
  Store store(dim);
  read_data(in, dim, store_fill, (int*) &store);
  int nobjs = store.size();
  NcDim* length = ncfile.add_dim( "length", nobjs);
  NcDim* nbscore = ncfile.add_dim( "nscore", dim);
  // have to transpose...
  for(int iField=0; iField < dim ; iField++)
    {
      float *values= new float[nobjs];
      for(int iObj=0;iObj<nobjs;iObj++)
	{
	  values[iObj]=store[iObj][iField];
	}
      NcVar *ncvar = ncfile.add_var(tags[iField],ncFloat, length);
      ncvar->put(values, length->size());
      delete [] values;
    }
  //file closed by destructor
  return 1;
}    

int main(int argc, char **argv)
{
  char *ncdName=NULL;
  char string[256];
  if (argc == 2)
    {
      sprintf(string,"%s.ncd",CutExtension(argv[1]));
      ncdName = string;
    }
  if (argc == 3) ncdName = argv[2];
  if (!ncdName)
    {
      printf(" syntax : l2ncdf <ascii_list> <ncdffile> \n");
      exit(1);
    } 
  make_ncdf(argv[1], ncdName);
  return 0;
}
